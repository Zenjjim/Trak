generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                      Int            @id @default(autoincrement())
  title                   String?
  email                   String         @unique
  slack                   String?        @unique
  professionId            String
  firstName               String
  lastName                String
  birthDate               DateTime
  dateOfEmployment        DateTime?
  terminationDate         DateTime?
  imageUrl                String?
  hrManagerId             Int?
  hrManager               Employee?      @relation("EmployeeToEmployee", fields: [hrManagerId], references: [id])
  profession              Profession     @relation(fields: [professionId], references: [id])
  employees               Employee[]     @relation("EmployeeToEmployee")
  employeeTask            EmployeeTask[] @relation("tasks")
  responsibleEmployeeTask EmployeeTask[] @relation("responsible_employee_tasks")
  responsibleTask         Task[]         @relation("responsible_tasks")
  notifications           Notification[] @relation("employee")
}

model EmployeeTask {
  id            String   @id @default(uuid())
  taskId        String
  completed     Boolean  @default(false)
  employeeId    Int
  responsibleId Int
  dueDate       DateTime
  employee      Employee @relation("tasks", fields: [employeeId], references: [id])
  responsible   Employee @relation("responsible_employee_tasks", fields: [responsibleId], references: [id])
  task          Task     @relation(fields: [taskId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  employeeId  Int
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  description String
  employee    Employee @relation("employee", fields: [employeeId], references: [id])
}

model Phase {
  id                String          @id @default(uuid())
  title             String
  processTemplateId String
  createdAt         DateTime        @default(now())
  order             Int             @default(1)
  dueDateDayOffset  Int?
  cronDate          DateTime?
  dueDate           DateTime?
  processTemplate   ProcessTemplate @relation(fields: [processTemplateId], references: [id])
  tasks             Task[]
}

model ProcessTemplate {
  id     String  @id @default(uuid())
  title  String
  slug   String  @unique
  phases Phase[]
}

model Profession {
  id       String     @id @default(uuid())
  title    String     @unique
  employee Employee[]
  tasks    Task[]
}

model Tag {
  id    String @id @default(uuid())
  title String @unique
  tasks Task[]
}

model Task {
  id            String         @id @default(uuid())
  title         String
  description   String?
  global        Boolean        @default(true)
  phaseId       String?
  responsibleId Int?
  createdAt     DateTime       @default(now())
  phase         Phase?         @relation(fields: [phaseId], references: [id])
  responsible   Employee?      @relation("responsible_tasks", fields: [responsibleId], references: [id])
  employeeTask  EmployeeTask[]
  professions   Profession[]
  tags          Tag[]
}
